// source: mem_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

// var jspb = require('google-protobuf');
import * as jspb from 'google-protobuf';
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.monitor.proto.MemInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.proto.MemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.monitor.proto.MemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.proto.MemInfo.displayName = 'proto.monitor.proto.MemInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.proto.MemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.proto.MemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.proto.MemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.proto.MemInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    free: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    avail: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    buffers: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    cached: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    swapCached: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    active: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    inactive: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    activeAnon: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    inactiveAnon: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    activeFile: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    inactiveFile: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    dirty: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    writeback: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    anonPages: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    mapped: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    kreclaimable: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    sreclaimable: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    sunreclaim: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    usedPercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.proto.MemInfo}
 */
proto.monitor.proto.MemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.proto.MemInfo;
  return proto.monitor.proto.MemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.proto.MemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.proto.MemInfo}
 */
proto.monitor.proto.MemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvail(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBuffers(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCached(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSwapCached(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setActive(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInactive(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setActiveAnon(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInactiveAnon(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setActiveFile(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInactiveFile(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirty(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWriteback(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnonPages(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMapped(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setKreclaimable(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSreclaimable(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSunreclaim(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setUsedPercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.proto.MemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.proto.MemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.proto.MemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.proto.MemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFree();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getAvail();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getBuffers();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCached();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getSwapCached();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getActive();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getInactive();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getActiveAnon();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getInactiveAnon();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getActiveFile();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getInactiveFile();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getDirty();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getWriteback();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getAnonPages();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getMapped();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getKreclaimable();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getSreclaimable();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getSunreclaim();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
  f = message.getUsedPercent();
  if (f !== 0.0) {
    writer.writeFloat(
      31,
      f
    );
  }
};


/**
 * optional float total = 1;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setTotal = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float free = 2;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getFree = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setFree = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float avail = 3;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getAvail = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setAvail = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float buffers = 4;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getBuffers = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setBuffers = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float cached = 5;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getCached = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setCached = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float swap_cached = 6;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getSwapCached = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setSwapCached = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float active = 7;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getActive = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setActive = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float inactive = 8;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getInactive = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setInactive = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float active_anon = 9;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getActiveAnon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setActiveAnon = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float inactive_anon = 10;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getInactiveAnon = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setInactiveAnon = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float active_file = 11;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getActiveFile = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setActiveFile = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float inactive_file = 12;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getInactiveFile = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setInactiveFile = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float dirty = 13;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getDirty = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setDirty = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float writeback = 14;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getWriteback = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setWriteback = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float anon_pages = 15;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getAnonPages = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setAnonPages = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float mapped = 16;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getMapped = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setMapped = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float kReclaimable = 17;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getKreclaimable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setKreclaimable = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional float sReclaimable = 18;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getSreclaimable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setSreclaimable = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional float sUnreclaim = 19;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getSunreclaim = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setSunreclaim = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional float used_percent = 31;
 * @return {number}
 */
proto.monitor.proto.MemInfo.prototype.getUsedPercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.monitor.proto.MemInfo} returns this
 */
proto.monitor.proto.MemInfo.prototype.setUsedPercent = function(value) {
  return jspb.Message.setProto3FloatField(this, 31, value);
};


// goog.object.extend(exports, proto.monitor.proto);
export const MemInfo = proto.monitor.proto.MemInfo;
