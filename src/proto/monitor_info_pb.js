// source: monitor_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

// var jspb = require('google-protobuf');
import * as jspb from 'google-protobuf';
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb.js';
// var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
import * as net_info_pb from './net_info_pb.js';
goog.object.extend(proto, google_protobuf_empty_pb);
// var net_info_pb = require('./net_info_pb.js');
goog.object.extend(proto, net_info_pb);
import * as mem_info_pb from './mem_info_pb.js';
// var mem_info_pb = require('./mem_info_pb.js');
goog.object.extend(proto, mem_info_pb);
import * as cpu_stat_pb from './cpu_stat_pb.js';
// var cpu_stat_pb = require('./cpu_stat_pb.js');
goog.object.extend(proto, cpu_stat_pb);
import * as cpu_softirq_pb from './cpu_softirq_pb.js';
// var cpu_softirq_pb = require('./cpu_softirq_pb.js');
goog.object.extend(proto, cpu_softirq_pb);
import * as cpu_load_pb from './cpu_load_pb.js';
// var cpu_load_pb = require('./cpu_load_pb.js');
goog.object.extend(proto, cpu_load_pb);
var metric_info_pb = require('./metric_info_pb.js');
goog.object.extend(proto, metric_info_pb);
var netcard_info_pb = require('./netcard_info_pb.js');
goog.object.extend(proto, netcard_info_pb);
var os_info_pb = require('./os_info_pb.js');
goog.object.extend(proto, os_info_pb);
goog.exportSymbol('proto.monitor.proto.MonitorInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.monitor.proto.MonitorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.monitor.proto.MonitorInfo.repeatedFields_, null);
};
goog.inherits(proto.monitor.proto.MonitorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.monitor.proto.MonitorInfo.displayName = 'proto.monitor.proto.MonitorInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.monitor.proto.MonitorInfo.repeatedFields_ = [3,4,6,8,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.monitor.proto.MonitorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.monitor.proto.MonitorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.monitor.proto.MonitorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.proto.MonitorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    osInfo: (f = msg.getOsInfo()) && os_info_pb.OsInfo.toObject(includeInstance, f),
    cpuInfoList: jspb.Message.toObjectList(msg.getCpuInfoList(),
    cpu_info_pb.CpuInfo.toObject, includeInstance),
    softIrqList: jspb.Message.toObjectList(msg.getSoftIrqList(),
    cpu_softirq_pb.SoftIrq.toObject, includeInstance),
    cpuLoad: (f = msg.getCpuLoad()) && cpu_load_pb.CpuLoad.toObject(includeInstance, f),
    cpuStatList: jspb.Message.toObjectList(msg.getCpuStatList(),
    cpu_stat_pb.CpuStat.toObject, includeInstance),
    memInfo: (f = msg.getMemInfo()) && mem_info_pb.MemInfo.toObject(includeInstance, f),
    netInfoList: jspb.Message.toObjectList(msg.getNetInfoList(),
    net_info_pb.NetInfo.toObject, includeInstance),
    metricInfo: (f = msg.getMetricInfo()) && metric_info_pb.MetricInfo.toObject(includeInstance, f),
    netcardInfoList: jspb.Message.toObjectList(msg.getNetcardInfoList(),
    netcard_info_pb.NetcardInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.monitor.proto.MonitorInfo}
 */
proto.monitor.proto.MonitorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.monitor.proto.MonitorInfo;
  return proto.monitor.proto.MonitorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.monitor.proto.MonitorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.monitor.proto.MonitorInfo}
 */
proto.monitor.proto.MonitorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new os_info_pb.OsInfo;
      reader.readMessage(value,os_info_pb.OsInfo.deserializeBinaryFromReader);
      msg.setOsInfo(value);
      break;
    case 3:
      var value = new cpu_info_pb.CpuInfo;
      reader.readMessage(value,cpu_info_pb.CpuInfo.deserializeBinaryFromReader);
      msg.addCpuInfo(value);
      break;
    case 4:
      var value = new cpu_softirq_pb.SoftIrq;
      reader.readMessage(value,cpu_softirq_pb.SoftIrq.deserializeBinaryFromReader);
      msg.addSoftIrq(value);
      break;
    case 5:
      var value = new cpu_load_pb.CpuLoad;
      reader.readMessage(value,cpu_load_pb.CpuLoad.deserializeBinaryFromReader);
      msg.setCpuLoad(value);
      break;
    case 6:
      var value = new cpu_stat_pb.CpuStat;
      reader.readMessage(value,cpu_stat_pb.CpuStat.deserializeBinaryFromReader);
      msg.addCpuStat(value);
      break;
    case 7:
      var value = new mem_info_pb.MemInfo;
      reader.readMessage(value,mem_info_pb.MemInfo.deserializeBinaryFromReader);
      msg.setMemInfo(value);
      break;
    case 8:
      var value = new net_info_pb.NetInfo;
      reader.readMessage(value,net_info_pb.NetInfo.deserializeBinaryFromReader);
      msg.addNetInfo(value);
      break;
    case 9:
      var value = new metric_info_pb.MetricInfo;
      reader.readMessage(value,metric_info_pb.MetricInfo.deserializeBinaryFromReader);
      msg.setMetricInfo(value);
      break;
    case 10:
      var value = new netcard_info_pb.NetcardInfo;
      reader.readMessage(value,netcard_info_pb.NetcardInfo.deserializeBinaryFromReader);
      msg.addNetcardInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.monitor.proto.MonitorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.monitor.proto.MonitorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.monitor.proto.MonitorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.monitor.proto.MonitorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOsInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      os_info_pb.OsInfo.serializeBinaryToWriter
    );
  }
  f = message.getCpuInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      cpu_info_pb.CpuInfo.serializeBinaryToWriter
    );
  }
  f = message.getSoftIrqList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      cpu_softirq_pb.SoftIrq.serializeBinaryToWriter
    );
  }
  f = message.getCpuLoad();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cpu_load_pb.CpuLoad.serializeBinaryToWriter
    );
  }
  f = message.getCpuStatList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      cpu_stat_pb.CpuStat.serializeBinaryToWriter
    );
  }
  f = message.getMemInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      mem_info_pb.MemInfo.serializeBinaryToWriter
    );
  }
  f = message.getNetInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      net_info_pb.NetInfo.serializeBinaryToWriter
    );
  }
  f = message.getMetricInfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      metric_info_pb.MetricInfo.serializeBinaryToWriter
    );
  }
  f = message.getNetcardInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      netcard_info_pb.NetcardInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.monitor.proto.MonitorInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional OsInfo os_info = 2;
 * @return {?proto.monitor.proto.OsInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.getOsInfo = function() {
  return /** @type{?proto.monitor.proto.OsInfo} */ (
    jspb.Message.getWrapperField(this, os_info_pb.OsInfo, 2));
};


/**
 * @param {?proto.monitor.proto.OsInfo|undefined} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setOsInfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearOsInfo = function() {
  return this.setOsInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.proto.MonitorInfo.prototype.hasOsInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CpuInfo cpu_info = 3;
 * @return {!Array<!proto.monitor.proto.CpuInfo>}
 */
proto.monitor.proto.MonitorInfo.prototype.getCpuInfoList = function() {
  return /** @type{!Array<!proto.monitor.proto.CpuInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, cpu_info_pb.CpuInfo, 3));
};


/**
 * @param {!Array<!proto.monitor.proto.CpuInfo>} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setCpuInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.monitor.proto.CpuInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.proto.CpuInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.addCpuInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.monitor.proto.CpuInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearCpuInfoList = function() {
  return this.setCpuInfoList([]);
};


/**
 * repeated SoftIrq soft_irq = 4;
 * @return {!Array<!proto.monitor.proto.SoftIrq>}
 */
proto.monitor.proto.MonitorInfo.prototype.getSoftIrqList = function() {
  return /** @type{!Array<!proto.monitor.proto.SoftIrq>} */ (
    jspb.Message.getRepeatedWrapperField(this, cpu_softirq_pb.SoftIrq, 4));
};


/**
 * @param {!Array<!proto.monitor.proto.SoftIrq>} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setSoftIrqList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.monitor.proto.SoftIrq=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.proto.SoftIrq}
 */
proto.monitor.proto.MonitorInfo.prototype.addSoftIrq = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.monitor.proto.SoftIrq, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearSoftIrqList = function() {
  return this.setSoftIrqList([]);
};


/**
 * optional CpuLoad cpu_load = 5;
 * @return {?proto.monitor.proto.CpuLoad}
 */
proto.monitor.proto.MonitorInfo.prototype.getCpuLoad = function() {
  return /** @type{?proto.monitor.proto.CpuLoad} */ (
    jspb.Message.getWrapperField(this, cpu_load_pb.CpuLoad, 5));
};


/**
 * @param {?proto.monitor.proto.CpuLoad|undefined} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setCpuLoad = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearCpuLoad = function() {
  return this.setCpuLoad(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.proto.MonitorInfo.prototype.hasCpuLoad = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated CpuStat cpu_stat = 6;
 * @return {!Array<!proto.monitor.proto.CpuStat>}
 */
proto.monitor.proto.MonitorInfo.prototype.getCpuStatList = function() {
  return /** @type{!Array<!proto.monitor.proto.CpuStat>} */ (
    jspb.Message.getRepeatedWrapperField(this, cpu_stat_pb.CpuStat, 6));
};


/**
 * @param {!Array<!proto.monitor.proto.CpuStat>} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setCpuStatList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.monitor.proto.CpuStat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.proto.CpuStat}
 */
proto.monitor.proto.MonitorInfo.prototype.addCpuStat = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.monitor.proto.CpuStat, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearCpuStatList = function() {
  return this.setCpuStatList([]);
};


/**
 * optional MemInfo mem_info = 7;
 * @return {?proto.monitor.proto.MemInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.getMemInfo = function() {
  return /** @type{?proto.monitor.proto.MemInfo} */ (
    jspb.Message.getWrapperField(this, mem_info_pb.MemInfo, 7));
};


/**
 * @param {?proto.monitor.proto.MemInfo|undefined} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setMemInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearMemInfo = function() {
  return this.setMemInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.proto.MonitorInfo.prototype.hasMemInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated NetInfo net_info = 8;
 * @return {!Array<!proto.monitor.proto.NetInfo>}
 */
proto.monitor.proto.MonitorInfo.prototype.getNetInfoList = function() {
  return /** @type{!Array<!proto.monitor.proto.NetInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, net_info_pb.NetInfo, 8));
};


/**
 * @param {!Array<!proto.monitor.proto.NetInfo>} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setNetInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.monitor.proto.NetInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.proto.NetInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.addNetInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.monitor.proto.NetInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearNetInfoList = function() {
  return this.setNetInfoList([]);
};


/**
 * optional MetricInfo metric_info = 9;
 * @return {?proto.monitor.proto.MetricInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.getMetricInfo = function() {
  return /** @type{?proto.monitor.proto.MetricInfo} */ (
    jspb.Message.getWrapperField(this, metric_info_pb.MetricInfo, 9));
};


/**
 * @param {?proto.monitor.proto.MetricInfo|undefined} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setMetricInfo = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearMetricInfo = function() {
  return this.setMetricInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.monitor.proto.MonitorInfo.prototype.hasMetricInfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * repeated NetcardInfo netcard_info = 10;
 * @return {!Array<!proto.monitor.proto.NetcardInfo>}
 */
proto.monitor.proto.MonitorInfo.prototype.getNetcardInfoList = function() {
  return /** @type{!Array<!proto.monitor.proto.NetcardInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, netcard_info_pb.NetcardInfo, 10));
};


/**
 * @param {!Array<!proto.monitor.proto.NetcardInfo>} value
 * @return {!proto.monitor.proto.MonitorInfo} returns this
*/
proto.monitor.proto.MonitorInfo.prototype.setNetcardInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.monitor.proto.NetcardInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.monitor.proto.NetcardInfo}
 */
proto.monitor.proto.MonitorInfo.prototype.addNetcardInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.monitor.proto.NetcardInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.monitor.proto.MonitorInfo} returns this
 */
proto.monitor.proto.MonitorInfo.prototype.clearNetcardInfoList = function() {
  return this.setNetcardInfoList([]);
};


// goog.object.extend(exports, proto.monitor.proto);
export const MonitorInfo = proto.monitor.proto.MonitorInfo;
